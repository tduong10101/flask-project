name: infra
on:
  pull_request:
  workflow_dispatch:
      inputs:
          terraform_job:
              type: choice
              description: Terraform
              options:
                  - plan
                  - apply
                  - destroy
env:
  BRANCH_NAME: ${{github.base_ref || github.ref_name}}
  TF_VAR_DB_PASS: ${{ secrets.db_pass }}
permissions:
    contents: read
    id-token: write
jobs:
    terraform:
        name: "Terraform"
        runs-on: ubuntu-latest
        environment: production

        defaults:
            run:
                shell: bash
                working-directory: "./atmos-tf/"

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v2

            - name: configure aws credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  role-to-assume: arn:aws:iam::069363837566:role/github-tnote-terraform
                  role-session-name: GitHub_to_AWS_via_FederatedOIDC
                  aws-region: ap-southeast-2
            - name: Setup Atmos
              uses: cloudposse/github-action-setup-atmos@1.0.2
              with:
                atmos-version: 1.45.3
                install-wrapper: false
            
            - name: Validate branch
              run: |
                if [[ $BRANCH_NAME == "env/"* ]]; then
                  echo "Valid branch. Current branch is: $BRANCH_NAME"
                else
                  echo "Invalid branch. Branch must be under env/*"
                  exit 1
                fi
            - name: Set env
              run: echo "STACK=${BRANCH_NAME#env/}"  >> $GITHUB_ENV

            - name: Run terraform plan
              if: ${{ inputs.terraform_job == 'plan' || github.event_name != 'workflow_dispatch' }}
              run: atmos terraform plan network -s $STACK
            - name: Run terraform deploy
              if: ${{ inputs.terraform_job == 'deploy' }}
              run: atmos terraform deploy network -s $STACK
            - name: Run terraform destroy
              if: ${{ inputs.terraform_job == 'destroy'}}
              run: atmos terraform destroy network -s $STACK -auto-approve